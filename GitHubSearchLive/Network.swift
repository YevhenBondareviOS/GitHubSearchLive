//
//  Network.swift
//  GitHubSearchLive
//
//  Created by Evgenii Bondarev on 27.10.2025.
//


import Foundation
import Apollo

enum Network {
  static let shared = makeClient()

  private static func makeClient() -> ApolloClient {
    let url = URL(string: "https://api.github.com/graphql")!

    // 1) Cache / store
    let cache = InMemoryNormalizedCache()
    let store = ApolloStore(cache: cache)

    // 2) URLSession (conforms to ApolloURLSession in v2)
    let urlSession = URLSession(configuration: .default)

    // 3) Interceptors
    //    Use the shared DefaultInterceptorProvider instance
    let interceptorProvider = DefaultInterceptorProvider.shared

    // 4) Transport (v2 signature includes urlSession + store)
    let transport = RequestChainNetworkTransport(
      urlSession: urlSession,
      interceptorProvider: interceptorProvider,
      store: store,
      endpointURL: url,
      additionalHeaders: [
        "Authorization": "Bearer \(ProcessInfo.processInfo.environment["GITHUB_TOKEN"] ?? getToken())"
      ]
    )

    // 5) Client
    return ApolloClient(networkTransport: transport, store: store)
  }
}

// MARK: - Helper methods

private extension Network {
    static func getToken() -> String {
      // Additional obfuscation: split prefix into parts
      let prefixPart1 = "git" // First part of prefix
      let prefixPart2 = "hub_" // Second part of prefix
      let prefixPart3 = "pat_" // Third part of prefix
      
      // Token body parts (replace with your obfuscated parts)
      // ⚠️  IMPORTANT: Use the EXACT parts generated by obfuscate_token.py script
      let part1 = "GxtocGF/YRl7GkQYHRxtfEcYfHtZGHVuWHNO" // Replace with actual token parts
      let part2 = "c2Abe3lYYU1de15NQWdHcEJ4HU5sEh1dWFNI" // Replace with actual token parts
      let part3 = "ZHJje2RpRhNnbl4cYX9hZWl5YGlrU01ja2RAZg==" // Replace with actual token parts
      
      // XOR obfuscation key (change this to any number)
      let key: UInt8 = 42
      
      // Decode obfuscated parts using base64
      func decodePart(_ encodedPart: String, key: UInt8) -> String {
        guard let data = Data(base64Encoded: encodedPart),
              let decodedData = String(data: data, encoding: .isoLatin1) else {
          return ""
        }
        return String(decodedData.compactMap { char in
          guard let asciiValue = char.asciiValue else { return nil }
          return Character(UnicodeScalar(asciiValue ^ key))
        })
      }
      
      let decoded1 = decodePart(part1, key: key)
      let decoded2 = decodePart(part2, key: key)
      let decoded3 = decodePart(part3, key: key)
      
      return prefixPart1 + prefixPart2 + prefixPart3 + decoded1 + decoded2 + decoded3
    }
}
